version: '3.8'

services:

  proxy:
    image: traefik:v2.4
    command: --api.insecure=true --providers.docker
    ports:
      - "8081:80"
      - "8097:8080"
    container_name: prp_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

#  prp_backend:
#    image: unicef/etools-prp:local
#    env_file:
#      - .env
#    build:
#      context: ./django_api
#      dockerfile: ./Dockerfile
#      args:
#        ENV: dev
#    volumes:
#      - './django_api:/code/'
#      - './data/etools_prp_logs:/data/etools_prp/logs'
#      - './data/etools_prp_uploads_unicef_progress_reports:/data/etools_prp/uploads/unicef/progress_reports'
#    command: bash -c "python /code/manage.py runserver 0.0.0.0:8080"
#    depends_on:
#      - db
#    labels:
#      - "traefik.http.routers.prp_backend.rule=PathPrefix(`/api`,`/social`,`/uploads`)"
#      - traefik.http.routers.prp_backend.service=prp_backend
#      - traefik.http.services.prp_backend.loadBalancer.server.port=8080
#      - traefik.enable=true


  prp_backend:
    image: unicef/etools-prp:develop
    env_file:
      - .env
    command: bash -c "python /code/manage.py runserver 0.0.0.0:8080"
    depends_on:
      - db
    labels:
      - "traefik.http.routers.prp_backend.rule=PathPrefix(`/api`,`/social`,`/uploads`)"
      - traefik.http.routers.prp_backend.service=prp_backend
      - traefik.http.services.prp_backend.loadBalancer.server.port=8080
      - traefik.enable=true

#  beater-prp:
#    command: bash -c "/usr/local/bin/waitforit -host=db -port=5432 && celery -A etools_prp beat -l ${CELERY_LOG_LEVEL:-info} --scheduler django_celery_beat.schedulers:DatabaseScheduler -b $REDIS_URL"
#    image: 'unicef/etools-prp'
#    env_file:
#      - .env
#    depends_on:
#      - prp_backend
#      - prp_redis
#    restart: always
#    volumes:
#      - './etools_prp:/code/'
#
#  worker-prp:
#    command: bash -c "/usr/local/bin/waitforit -host=db -port=5432 && celery -A etools_prp worker -l ${CELERY_LOG_LEVEL:-info} -b $REDIS_URL"
#    image: 'unicef/etools-prp'
#    env_file:
#      - .env
#    depends_on:
#      - etools_prp
#      - prp_redis
#    restart: always
#    volumes:
#      - './etools_prp:/code/'

  db:
    image: unicef/etools-prp-db
    env_file:
      - .env
    build:
      context: ./db
      dockerfile: ./Dockerfile
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust

  # Make sure the django .env file has the correct path for redis url set to:
  redis:
    image: redis:6.2-alpine
    container_name: prp_redis

  # id-management-frontend:
  #   image: unicef/etools-prp-id-management-frontend
  #   build:
  #     context: ./react/id_management_frontend
  #     dockerfile: ./Dockerfile
  #   volumes:
  #     - ./react/id_management_frontend/:/code
  #     - /code/node_modules
  #   command: bash -c "npm start"
  #   labels:
  #     - "traefik.http.routers.id-management-frontend.rule=PathPrefix(`/id-management`)"
  #     - traefik.http.routers.id-management-frontend.service=id-management-frontend
  #     - traefik.http.routers.id-management-frontend.middlewares=id-management-frontend-stripprefix
  #     - traefik.http.middlewares.id-management-frontend-stripprefix.stripprefix.prefixes=/id-management
  #     - traefik.http.services.id-management-frontend.loadBalancer.server.port=3000
  #     - traefik.enable=true

  polymer3:
    image: unicef/etools-prp-polymer_3
    build:
      context: ./polymer_3
      dockerfile: ./Dockerfile-dev
    volumes:
       - ./polymer_3/:/code
    command: ash -c "npm run devPoly3"
    labels:
      - "traefik.http.routers.polymer33.rule=PathPrefix(`/ip`)"
      - traefik.http.routers.polymer33.service=polymer33
      - traefik.http.routers.polymer33.middlewares=polymer33-stripprefix
      - traefik.http.middlewares.polymer33-stripprefix.stripprefix.prefixes=/ip
      - traefik.http.services.polymer33.loadBalancer.server.port=8082
      - traefik.enable=true

  # polymer_cluster:
  #   image: unicef/etools-prp-polymer_cluster
  #   build:
  #     context: ./polymer_cluster
  #     dockerfile: ./Dockerfile-dev
  #   volumes:
  #      - ./polymer_cluster/:/code
  #   command: ash -c "npm run devPoly3"
  #   labels:
  #     - "traefik.http.routers.polymer34.rule=PathPrefix(`/app_cluster`)"
  #     - traefik.http.routers.polymer34.service=polymer34
  #     - traefik.http.routers.polymer34.middlewares=polymer34-stripprefix
  #     - traefik.http.middlewares.polymer34-stripprefix.stripprefix.prefixes=/app_cluster
  #     - traefik.http.services.polymer34.loadBalancer.server.port=8082
  #     - traefik.enable=true


  # ATTENTION: if you have the below block uncommented make sure the polymer3 and polymer1 sections are commented out
#  polymer:
#    image: unicef/etools-prp-polymer_3
#    build:
#      context: ./polymer_3
#      dockerfile: ./Dockerfile-dev
#    volumes:
#        - ./polymer_3/:/code
#    command: ash -c "npm run dev"
#    labels:
#      - "traefik.http.routers.polymer.rule=PathPrefix(`/`)"
#      - traefik.http.routers.polymer.service=polymer
#      - traefik.http.services.polymer.loadBalancer.server.port=8082
#      - traefik.enable=true

  # ATTENTION: you can either have polymer-built or polymer running.. not both.. always have one commented out
  # to renew the image, go to polymer_3 directory and run the following line:
  # docker build -t unicef/etools-prp-polymer:3latest -f Dockerfile-bundle .
  # if you work on the backend / want to get started quickly, pull latest before running docker-compose up by running:
  # docker pull unicef/etools-prp-polymer:3latest
  # polymer-built:
  #   image: unicef/etools-prp-polymer:3latest
  #   build:
  #     context: ./polymer_3
  #     dockerfile: ./Dockerfile-bundle
  #   labels:
  #     - "traefik.http.routers.polymerB.rule=PathPrefix(`/`)"
  #     - traefik.http.routers.polymerB.service=polymerB
  #     - traefik.http.services.polymerB.loadBalancer.server.port=8082
  #     - traefik.enable=true
